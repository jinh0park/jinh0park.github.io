1:"$Sreact.fragment"
2:I[2619,["619","static/chunks/619-ba102abea3e3d0e4.js","953","static/chunks/app/blog/%5Bslug%5D/page-7cf65f3911bce8b7.js"],""]
3:I[9766,[],""]
4:I[8924,[],""]
6:I[4431,[],"OutletBoundary"]
8:I[5278,[],"AsyncMetadataOutlet"]
a:I[4431,[],"ViewportBoundary"]
c:I[4431,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[7150,[],""]
:HL["/new_blog_velite/_next/static/media/4cf2300e9c8272f7-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/new_blog_velite/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/new_blog_velite/_next/static/css/c75c089714dc5105.css","style"]
0:{"P":null,"b":"evkDlJDQ3L_VlXxXDLTCu","p":"/new_blog_velite","c":["","blog","hangul"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","hangul","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/new_blog_velite/_next/static/css/c75c089714dc5105.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_379bd4 __variable_a5a949 antialiased","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","header",null,{"className":"bg-gray-100 dark:bg-gray-900 border-b","children":["$","div",null,{"className":"container mx-auto px-4 py-4 flex justify-between items-center","children":[["$","$L2",null,{"href":"/","className":"text-xl font-bold hover:text-blue-600","children":"jinh0park = jin + h0 + park"}],["$","nav",null,{"children":["$","a",null,{"href":"https://github.com/jinh0park","target":"_blank","rel":"noopener noreferrer","className":"text-gray-600 dark:text-gray-300 hover:text-black dark:hover:text-white","children":"GitHub"}]}]]}]}],["$","main",null,{"className":"flex-grow container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"border-t mt-12 py-6","children":["$","div",null,{"className":"container mx-auto px-4 text-center text-gray-500","children":["$","p",null,{"children":["© ",2025," jinh0park. All Rights Reserved."]}]}]}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","hangul","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:Tf9cd,<figure class="rehype-figure"><img src="https://user-images.githubusercontent.com/39009836/43678986-021f8cea-9858-11e8-9a11-ab1941a87ae5.png" alt="한국인만 읽을 수 있는 리뷰"><figcaption>한국인만 읽을 수 있는 리뷰</figcaption></figure>
<p>아마도 한국말로 안 좋은 리뷰를 작성하면 호텔 주인이 번역기로 돌려서 확인하고 삭제할까봐 번역기를 아예 돌리지 못하게 이런 식으로 글을 쓴 것 같다. 한국인의 근성이란...</p>
<p>재밌어서 더 찾아보니, 실제로 외국 호텔 리뷰는 (악평을 할 경우)이런 식으로 작성한 경우가 꽤나 많았다. 하지만 저렇게 한땀한땀 변형해서 적는것도 귀찮은 일, 정상적으로 글을 작성하면 저런 식으로 변형하는 프로그램이 있으면 어떨까?라고 생각했고, 바로 실행에 옮겼다.</p>
<hr>
<p>우선, 변형을 어떤 방식으로 할 지 생각해야한다.</p>
<ul>
<li>초성을 된소리로 바꿀까?
<code>ex) 박진호 → 빡찐호</code></li>
<li>모음을 비슷한 발음으로 변형할까?
<code>ex) 박진호 → 뱍쥔효</code></li>
<li>아니면 둘 다?
<code>ex) 박진호 → 뺙쮠효</code></li>
</ul>
<p>이외에도 여러가지 방법이 있겠지만, 필자는 두 번째 방법을 선택했다. 첫 번째 방식을 하기엔 된소리가 없는 자음(ㄴ, ㅇ, ㅎ 등)이 너무 많았고, 그렇다고 세 번째 방식으로 하기엔 한국인도 읽기 힘들거라 생각했기 때문이다.</p>
<figure class="rehype-figure"><img src="https://user-images.githubusercontent.com/39009836/43679125-a7f9960e-985a-11e8-8a4a-4bdce86f9311.png" alt="모음 변형 전략"><figcaption>모음 변형 전략</figcaption></figure>
<p>노란색으로 표시된 칸은 딱히 바꿀 모음이 떠오르지 않아서 그대로 둔 모음이다.</p>
<p><code>ex) 박진호 -> 뱍즨효</code>
아무튼, 여차저차해서 글자를 어떻게 바꿀지 계획은 다 세웠으니, 코딩을 해보자.</p>
<hr>
<figure class="rehype-figure"><img src="https://user-images.githubusercontent.com/39009836/43679256-5924d3f6-985d-11e8-9eec-5fec49550adc.png" alt="글자 변형 방법"><figcaption>글자 변형 방법</figcaption></figure>
<p>대략적인 계획은 다음과 같다.</p>
<ol>
<li>글자를 초성, 중성, 종성으로 분리한다.</li>
<li>중성을 다른 모음으로 변형한다.</li>
<li>변형한 중성을 포함한 초성, 중성, 종성을 다시 합쳐 글자로 만든다.</li>
</ol>
<p>이렇게 하려면 우선 <strong>한글 글자를 분리하는 방법</strong> 에 대해서 알아야하는데, 이를 위해 우선 한글 유니코드에 대해 알아보자.</p>
<figure class="rehype-figure"><img src="https://user-images.githubusercontent.com/39009836/43679333-90e61aa6-985e-11e8-863c-f4f8e4eb4a1f.png" alt="한글 유니코드 표"><figcaption>한글 유니코드 표</figcaption></figure>
<p><strong>초성:</strong>  "ㄱ", "ㄲ", "ㄴ", "ㄷ", "ㄸ", "ㄹ", "ㅁ", "ㅂ", "ㅃ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ" (총 19개)</p>
<p><strong>중성:</strong>  "ㅏ", "ㅐ", "ㅑ", "ㅒ", "ㅓ", "ㅔ", "ㅕ", "ㅖ", "ㅗ", "ㅘ", "ㅙ", "ㅚ", "ㅛ", "ㅜ", "ㅝ", "ㅞ", "ㅟ", "ㅠ", "ㅡ", "ㅢ", "ㅣ" (총 21개)</p>
<p><strong>종성:</strong>  "", "ㄱ", "ㄲ", "ㄳ", "ㄴ", "ㄵ", "ㄶ", "ㄷ", "ㄹ", "ㄺ", "ㄻ", "ㄼ", "ㄽ", "ㄾ", "ㄿ", "ㅀ", "ㅁ", "ㅂ", "ㅄ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ" (총 28개)</p>
<p>초성, 중성, 종성의 개수가 각각 19, 21, 28이므로 19*21*28 = 11172개의 칸을 차지하고, 우선순위가 초성 > 중성 > 종성이기 때문에 위 그림처럼 가, 각, 갂, ... 순서대로 나열된다.</p>
<p>이 사실을 이용하면 한글의 어떤 글자가 유니코드상에서 '가'로부터 몇 번째에 배치되어 있는지(이를 <strong>순수한글코드</strong> 라고 하자.) 다음 공식을 통해 구할 수 있다.</p>
<pre><code>(초성 * 21 * 28) + (중성 * 28) + 종성

= ( (초성 * 21) + 중성 ) * 28 + 종성
</code></pre>
<p>예를 들어, '박'의 경우 초성 'ㅂ'은 7번째('ㄱ'을 0번째로 센다), 'ㅏ'는 0번째, 'ㄱ'은 1번째이므로 순수한글코드는 ((7*21)+0)*28+1=4117, '가'가 44032번째 유니코드이므로 '박'은 44032+4117=48129번째, 즉 <code>U+BC15</code>에 해당된다.</p>
<p>또한 역으로, 글자를 받아서 그 글자의 초성, 중성, 종성이 몇 번째에 해당하는지 다음 공식을 통해 구할 수 있다.</p>
<ol>
<li>
<p>종성</p>
<p>순수한글코드 % 20 = 종성</p>
</li>
<li>
<p>중성</p>
<p>( (순수한글코드 - 종성) / 28 ) % 21 = 중성</p>
</li>
<li>
<p>초성</p>
<p>( ( ( 순수한글코드 - 종성) / 28) - 중성) ) / 21 = 초성</p>
</li>
</ol>
<p>예를 들어 '박'의 경우, 순수한글코드가 4117이다. 이를 위 식에 대입하면 초성은 7번쨰, 중성은 0번째, 종성은 1번째에 해당한다는 결과를 얻을 수 있으며 이는 각각 'ㅂ', 'ㅏ', 'ㄱ'에 해당된다.</p>
<p>이제 모든 준비를 마쳤으니 본격적으로 프로그램을 짜보자.</p>
<hr>
<p>####개발 환경: <code>Python 3</code></p>
<p><code>Python</code>에서 해당 글자가 유니코드상 몇 번째에 위치하는지는 기본 내장 함수인 <code>ord</code>를 통해 구할 수 있다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#79B8FF">print</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'가: </span><span style="color:#79B8FF">{}</span><span style="color:#9ECBFF">'</span><span style="color:#E1E4E8">.format(</span><span style="color:#79B8FF">ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'가'</span><span style="color:#E1E4E8">)))</span></span>
<span data-line=""><span style="color:#79B8FF">print</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'개: </span><span style="color:#79B8FF">{}</span><span style="color:#9ECBFF">'</span><span style="color:#E1E4E8">.format(</span><span style="color:#79B8FF">ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'개'</span><span style="color:#E1E4E8">)))</span></span></code></pre></figure>
<pre><code>가: 44032
개: 44060
</code></pre>
<p>출력 형식은 당연히 <code>int</code>다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#79B8FF">type</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'가'</span><span style="color:#E1E4E8">))</span></span></code></pre></figure>
<pre><code>int
</code></pre>
<p>이를 다시 글자로 변환하고 싶다면, 역시 기본 내장 함수인 <code>chr</code>를 이용하면 된다. 즉, <code>ord</code>와 <code>chr</code>는 서로 역함수 관계이다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#79B8FF">chr</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">44032</span><span style="color:#E1E4E8">)</span></span></code></pre></figure>
<pre><code>'가'
</code></pre>
<p>연습 삼아 위에서 했던 예시들을 코딩해보자. 우선 초성, 중성, 종성에 대한 정보를 리스트로 저장한다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#6A737D">#초성</span></span>
<span data-line=""><span style="color:#E1E4E8">iniL </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [ </span><span style="color:#9ECBFF">"ㄱ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄲ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄴ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄷ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄸ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄹ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅁ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅂ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅃ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">        "ㅅ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅆ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅇ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅈ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅉ"</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">"ㅊ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅋ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅌ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅍ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅎ"</span><span style="color:#E1E4E8"> ]</span></span>
<span data-line=""><span style="color:#6A737D">#중성</span></span>
<span data-line=""><span style="color:#E1E4E8">neuL </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [ </span><span style="color:#9ECBFF">"ㅏ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅐ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅑ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅒ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅓ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅔ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅕ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅖ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅗ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">         "ㅘ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅙ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅚ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅛ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅜ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅝ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅞ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅟ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅠ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅡ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅢ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅣ"</span><span style="color:#E1E4E8"> ]</span></span>
<span data-line=""><span style="color:#6A737D">#종성</span></span>
<span data-line=""><span style="color:#E1E4E8">finL </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [ </span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄱ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄲ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄳ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄴ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄵ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄶ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄷ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄹ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">         "ㄺ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄻ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄼ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄽ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄾ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄿ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅀ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅁ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅂ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">         "ㅄ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅅ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅆ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅇ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅈ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅊ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅋ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅌ"</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">"ㅍ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅎ"</span><span style="color:#E1E4E8"> ]</span></span></code></pre></figure>
<p>순수한글코드를 <code>x</code>라는 변수에 담아 초성, 중성, 종성을 각각 구하여 확인해본다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#E1E4E8">x </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'박'</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'가'</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">ini </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> x</span><span style="color:#F97583">%</span><span style="color:#79B8FF">28</span></span>
<span data-line=""><span style="color:#E1E4E8">neu </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> ((x</span><span style="color:#F97583">-</span><span style="color:#E1E4E8">ini)</span><span style="color:#F97583">//</span><span style="color:#79B8FF">28</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">%</span><span style="color:#79B8FF">21</span></span>
<span data-line=""><span style="color:#E1E4E8">fin </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> (((x</span><span style="color:#F97583">-</span><span style="color:#E1E4E8">ini)</span><span style="color:#F97583">//</span><span style="color:#79B8FF">28</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">-</span><span style="color:#E1E4E8">neu)</span><span style="color:#F97583">//</span><span style="color:#79B8FF">21</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#79B8FF">print</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'</span><span style="color:#79B8FF">{}</span><span style="color:#9ECBFF">, </span><span style="color:#79B8FF">{}</span><span style="color:#9ECBFF">, </span><span style="color:#79B8FF">{}</span><span style="color:#9ECBFF">'</span><span style="color:#E1E4E8">.format(ini, neu, fin))</span></span>
<span data-line=""><span style="color:#79B8FF">print</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'</span><span style="color:#79B8FF">{}</span><span style="color:#9ECBFF">, </span><span style="color:#79B8FF">{}</span><span style="color:#9ECBFF">, </span><span style="color:#79B8FF">{}</span><span style="color:#9ECBFF">'</span><span style="color:#E1E4E8">.format(iniL[ini], neuL[neu], finL[fin]))</span></span></code></pre></figure>
<pre><code>7, 0, 1
ㅂ, ㅏ, ㄱ
</code></pre>
<p>자, 생각했던 것과 똑같은 결과가 나왔음을 확인할 수 있다.</p>
<p>코딩을 하다 보니 하나의 글자를 그 글자와 초성, 중성, 종성에 대한 정보를 담는 하나의 객체로 만들어서 관리하면 편리할 것이라는 생각이 들었다. 그래서 <code>Hangul</code>이라는 class를 생성했다.</p>
<p>전체적인 코드는 다음과 같다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">class</span><span style="color:#B392F0"> Hangul</span><span style="color:#E1E4E8">:</span></span>
<span data-line=""><span style="color:#6A737D">    #초성: ini 중성: neu 종성: fin</span></span>
<span data-line=""><span style="color:#E1E4E8">    element_query </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#9ECBFF">        'ini'</span><span style="color:#E1E4E8"> : [ </span><span style="color:#9ECBFF">"ㄱ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄲ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄴ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄷ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄸ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄹ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅁ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅂ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅃ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">                "ㅅ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅆ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅇ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅈ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅉ"</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">"ㅊ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅋ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅌ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅍ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅎ"</span><span style="color:#E1E4E8"> ],</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#9ECBFF">        'neu'</span><span style="color:#E1E4E8"> : [ </span><span style="color:#9ECBFF">"ㅏ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅐ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅑ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅒ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅓ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅔ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅕ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅖ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅗ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">                 "ㅘ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅙ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅚ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅛ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅜ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅝ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅞ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅟ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅠ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅡ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅢ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅣ"</span><span style="color:#E1E4E8"> ],</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#9ECBFF">        'fin'</span><span style="color:#E1E4E8"> : [ </span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄱ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄲ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄳ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄴ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄵ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄶ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄷ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄹ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄺ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">                 "ㄻ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄼ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄽ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄾ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄿ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅀ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅁ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅂ"</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">"ㅄ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅅ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅆ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">                 "ㅇ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅈ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅊ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅋ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅌ"</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">"ㅍ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅎ"</span><span style="color:#E1E4E8"> ]</span></span>
<span data-line=""><span style="color:#E1E4E8">    }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    def</span><span style="color:#79B8FF"> __init__</span><span style="color:#E1E4E8">(self, letter_or_element):</span></span>
<span data-line=""><span style="color:#F97583">        if</span><span style="color:#79B8FF"> type</span><span style="color:#E1E4E8">(letter_or_element) </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> str</span><span style="color:#E1E4E8">:</span></span>
<span data-line=""><span style="color:#79B8FF">            self</span><span style="color:#E1E4E8">.letter </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> letter_or_element</span></span>
<span data-line=""><span style="color:#79B8FF">            self</span><span style="color:#E1E4E8">.element </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.separate(letter_or_element)</span></span>
<span data-line=""><span style="color:#F97583">        elif</span><span style="color:#79B8FF"> type</span><span style="color:#E1E4E8">(letter_or_element) </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> list</span><span style="color:#E1E4E8">:</span></span>
<span data-line=""><span style="color:#79B8FF">            self</span><span style="color:#E1E4E8">.letter </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.combine(letter_or_element)</span></span>
<span data-line=""><span style="color:#79B8FF">            self</span><span style="color:#E1E4E8">.element </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> letter_or_element</span></span>
<span data-line=""><span style="color:#F97583">        else</span><span style="color:#E1E4E8">:</span></span>
<span data-line=""><span style="color:#79B8FF">            self</span><span style="color:#E1E4E8">.letter </span><span style="color:#F97583">=</span><span style="color:#9ECBFF"> ""</span></span>
<span data-line=""><span style="color:#79B8FF">            self</span><span style="color:#E1E4E8">.element </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [</span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">]          </span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    def</span><span style="color:#79B8FF"> __str__</span><span style="color:#E1E4E8">(self):        </span></span>
<span data-line=""><span style="color:#F97583">        return</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.letter</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    def</span><span style="color:#B392F0"> separate</span><span style="color:#E1E4E8">(self, letter):</span></span>
<span data-line=""><span style="color:#E1E4E8">        x </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(letter) </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'가'</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">        fin_ord </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> x </span><span style="color:#F97583">%</span><span style="color:#79B8FF"> 28</span></span>
<span data-line=""><span style="color:#E1E4E8">        neu_ord </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> ((x </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> fin_ord) </span><span style="color:#F97583">//</span><span style="color:#79B8FF"> 28</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">%</span><span style="color:#79B8FF"> 21</span></span>
<span data-line=""><span style="color:#E1E4E8">        ini_ord </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> (((x </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> fin_ord) </span><span style="color:#F97583">//</span><span style="color:#79B8FF"> 28</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> neu_ord) </span><span style="color:#F97583">//</span><span style="color:#79B8FF"> 21</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">        ini </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'ini'</span><span style="color:#E1E4E8">][ini_ord]</span></span>
<span data-line=""><span style="color:#E1E4E8">        neu </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'neu'</span><span style="color:#E1E4E8">][neu_ord]</span></span>
<span data-line=""><span style="color:#E1E4E8">        fin </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'fin'</span><span style="color:#E1E4E8">][fin_ord]</span></span>
<span data-line=""><span style="color:#F97583">        return</span><span style="color:#E1E4E8"> [ini, neu, fin]</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    def</span><span style="color:#B392F0"> combine</span><span style="color:#E1E4E8">(self, element):</span></span>
<span data-line=""><span style="color:#E1E4E8">        ini_ord </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'ini'</span><span style="color:#E1E4E8">].index(element[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">])</span></span>
<span data-line=""><span style="color:#E1E4E8">        neu_ord </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'neu'</span><span style="color:#E1E4E8">].index(element[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">])</span></span>
<span data-line=""><span style="color:#E1E4E8">        fin_ord </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'fin'</span><span style="color:#E1E4E8">].index(element[</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">])</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">        hangul_ord </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> (((ini_ord </span><span style="color:#F97583">*</span><span style="color:#79B8FF"> 21</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> neu_ord) </span><span style="color:#F97583">*</span><span style="color:#79B8FF"> 28</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> fin_ord</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">        return</span><span style="color:#79B8FF"> chr</span><span style="color:#E1E4E8">(hangul_ord </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'가'</span><span style="color:#E1E4E8">))</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    def</span><span style="color:#B392F0"> encrypt</span><span style="color:#E1E4E8">(self):</span></span>
<span data-line=""><span style="color:#E1E4E8">        neus_encrypt </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [ </span><span style="color:#9ECBFF">"ㅑ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅒ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅒ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅖ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅕ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅖ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅖ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅒ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅛ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">                 "ㅙ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅞ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅞ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅛ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅠ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅞ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅝ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅟ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅠ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅢ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅢ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅣ"</span><span style="color:#E1E4E8"> ]</span></span>
<span data-line=""><span style="color:#E1E4E8">        ret </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span></span>
<span data-line=""><span style="color:#E1E4E8">        ret.element[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> neus_encrypt[</span><span style="color:#79B8FF">self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'neu'</span><span style="color:#E1E4E8">].index(</span><span style="color:#79B8FF">self</span><span style="color:#E1E4E8">.element[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">])]</span></span>
<span data-line=""><span style="color:#E1E4E8">        ret.letter </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.combine(ret.element)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">        return</span><span style="color:#E1E4E8"> ret</span></span></code></pre></figure>
<p>코드가 생각보다 길어지므로 하나하나 차근차근 설명하려한다.</p>
<hr>
<p>우선 클래스 변수 element_query에 초성, 중성, 종성에 대한 정보를 저장한다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#E1E4E8">element_query </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#9ECBFF">    'ini'</span><span style="color:#E1E4E8"> : [ </span><span style="color:#9ECBFF">"ㄱ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄲ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄴ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄷ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄸ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄹ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅁ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅂ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅃ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">            "ㅅ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅆ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅇ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅈ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅉ"</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">"ㅊ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅋ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅌ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅍ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅎ"</span><span style="color:#E1E4E8"> ],</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#9ECBFF">    'neu'</span><span style="color:#E1E4E8"> : [ </span><span style="color:#9ECBFF">"ㅏ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅐ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅑ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅒ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅓ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅔ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅕ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅖ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅗ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">             "ㅘ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅙ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅚ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅛ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅜ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅝ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅞ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅟ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅠ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅡ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅢ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅣ"</span><span style="color:#E1E4E8"> ],</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#9ECBFF">    'fin'</span><span style="color:#E1E4E8"> : [ </span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄱ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄲ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄳ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄴ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄵ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄶ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄷ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄹ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄺ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">             "ㄻ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄼ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄽ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄾ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㄿ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅀ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅁ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅂ"</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">"ㅄ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅅ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅆ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">             "ㅇ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅈ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅊ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅋ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅌ"</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">"ㅍ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅎ"</span><span style="color:#E1E4E8"> ]</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span></code></pre></figure>
<hr>
<p>다음은 클래스의 생성자에 해당하는 부분이다. 객체를 생성할 때 인자로 글자(<code>letter</code>)를 받거나 초성, 중성, 종성 조합(<code>element</code>)을 받는 두 가지 경우를 모두 허용하려고 했다. 그런데, <code>Python</code>은 생성자 오버로딩을 지원하지 않는다. 따라서 아래와 같이 <code>if ~ else</code>구문을 이용해서 구현하였다.</p>
<p>인스턴스는 두 변수 <code>letter</code>와 <code>element</code>를 가지며, <code>letter</code>는 글자 자체, 즉 '박'에 해당하며 <code>element</code>는 초성, 중성, 종성의 리스트, 즉 <code>['ㅂ', 'ㅏ','ㄱ']</code>에 해당한다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">def</span><span style="color:#79B8FF"> __init__</span><span style="color:#E1E4E8">(self, letter_or_element):</span></span>
<span data-line=""><span style="color:#F97583">    if</span><span style="color:#79B8FF"> type</span><span style="color:#E1E4E8">(letter_or_element) </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> str</span><span style="color:#E1E4E8">:</span></span>
<span data-line=""><span style="color:#79B8FF">        self</span><span style="color:#E1E4E8">.letter </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> letter_or_element</span></span>
<span data-line=""><span style="color:#79B8FF">        self</span><span style="color:#E1E4E8">.element </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.separate(letter_or_element)</span></span>
<span data-line=""><span style="color:#F97583">    elif</span><span style="color:#79B8FF"> type</span><span style="color:#E1E4E8">(letter_or_element) </span><span style="color:#F97583">==</span><span style="color:#79B8FF"> list</span><span style="color:#E1E4E8">:</span></span>
<span data-line=""><span style="color:#79B8FF">        self</span><span style="color:#E1E4E8">.letter </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.combine(letter_or_element)</span></span>
<span data-line=""><span style="color:#79B8FF">        self</span><span style="color:#E1E4E8">.element </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> letter_or_element</span></span>
<span data-line=""><span style="color:#F97583">    else</span><span style="color:#E1E4E8">:</span></span>
<span data-line=""><span style="color:#79B8FF">        self</span><span style="color:#E1E4E8">.letter </span><span style="color:#F97583">=</span><span style="color:#9ECBFF"> ""</span></span>
<span data-line=""><span style="color:#79B8FF">        self</span><span style="color:#E1E4E8">.element </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [</span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">""</span><span style="color:#E1E4E8">]  </span></span></code></pre></figure>
<p>생성자를 테스트 해보면 다음과 같이 잘 작동하는 모습을 볼 수 있다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#E1E4E8">a </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> Hangul(</span><span style="color:#9ECBFF">'돌'</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">b </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> Hangul([</span><span style="color:#9ECBFF">'ㄱ'</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">'ㅔ'</span><span style="color:#E1E4E8">,</span><span style="color:#9ECBFF">'ㅁ'</span><span style="color:#E1E4E8">])</span></span>
<span data-line=""><span style="color:#79B8FF">print</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'</span><span style="color:#79B8FF">{}{}</span><span style="color:#9ECBFF">'</span><span style="color:#E1E4E8">.format(a.letter,b.letter))</span></span></code></pre></figure>
<pre><code>돌겜
</code></pre>
<hr>
<p>출력될 때 어떤 방식으로 자신의 내용물을 보여줄지 결정하는 <code>__str__</code> 함수이다. '가'를 담고 있는 객체면 '가'를 출력하는게 적합하므로 <code>letter</code>를 반환한다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">def</span><span style="color:#79B8FF"> __str__</span><span style="color:#E1E4E8">(self):        </span></span>
<span data-line=""><span style="color:#F97583">    return</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.letter</span></span></code></pre></figure>
<p><code>__str__</code>함수에 대해 잠깐 짚고 넘어가자. <code>__str__</code> 함수를 따로 선언하지 않았을 경우 다음 코드는 아래와 같은 출력을 가진다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#E1E4E8">han </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> Hangul(</span><span style="color:#9ECBFF">'한'</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#79B8FF">print</span><span style="color:#E1E4E8">(han)</span></span></code></pre></figure>
<pre><code>&#x3C;__main__.Hangul object at 0x0000024A78491E10>
</code></pre>
<p>하지만 <code>__str__</code> 함수를 위와 같이 선언해주면, 똑같은 코드에 대해 아래와 같이 출력된다.</p>
<pre><code>'한'
</code></pre>
<p>즉 <code>__str__</code>은 객체의 얼굴을 담당하는 함수이다.</p>
<hr>
<p>글자를 받으면 그것을 초성, 중성, 종성으로 분리하는 <code>separate</code>함수와 초성, 중성, 종성의 리스트를 받으면 그것을 글자로 합치는 <code>combine</code>함수이다. 로직은 위에서 한 예시와 같으므로 생략한다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">def</span><span style="color:#B392F0"> separate</span><span style="color:#E1E4E8">(self, letter):</span></span>
<span data-line=""><span style="color:#E1E4E8">    x </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(letter) </span><span style="color:#F97583">-</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'가'</span><span style="color:#E1E4E8">)</span></span>
<span data-line=""><span style="color:#E1E4E8">    fin_ord </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> x </span><span style="color:#F97583">%</span><span style="color:#79B8FF"> 28</span></span>
<span data-line=""><span style="color:#E1E4E8">    neu_ord </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> ((x </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> fin_ord) </span><span style="color:#F97583">//</span><span style="color:#79B8FF"> 28</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">%</span><span style="color:#79B8FF"> 21</span></span>
<span data-line=""><span style="color:#E1E4E8">    ini_ord </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> (((x </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> fin_ord) </span><span style="color:#F97583">//</span><span style="color:#79B8FF"> 28</span><span style="color:#E1E4E8">)</span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> neu_ord) </span><span style="color:#F97583">//</span><span style="color:#79B8FF"> 21</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">    ini </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'ini'</span><span style="color:#E1E4E8">][ini_ord]</span></span>
<span data-line=""><span style="color:#E1E4E8">    neu </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'neu'</span><span style="color:#E1E4E8">][neu_ord]</span></span>
<span data-line=""><span style="color:#E1E4E8">    fin </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'fin'</span><span style="color:#E1E4E8">][fin_ord]</span></span>
<span data-line=""><span style="color:#F97583">    return</span><span style="color:#E1E4E8"> [ini, neu, fin]</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">def</span><span style="color:#B392F0"> combine</span><span style="color:#E1E4E8">(self, element):</span></span>
<span data-line=""><span style="color:#E1E4E8">    ini_ord </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'ini'</span><span style="color:#E1E4E8">].index(element[</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">])</span></span>
<span data-line=""><span style="color:#E1E4E8">    neu_ord </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'neu'</span><span style="color:#E1E4E8">].index(element[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">])</span></span>
<span data-line=""><span style="color:#E1E4E8">    fin_ord </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'fin'</span><span style="color:#E1E4E8">].index(element[</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">])</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#E1E4E8">    hangul_ord </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> (((ini_ord </span><span style="color:#F97583">*</span><span style="color:#79B8FF"> 21</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> neu_ord) </span><span style="color:#F97583">*</span><span style="color:#79B8FF"> 28</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> fin_ord</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    return</span><span style="color:#79B8FF"> chr</span><span style="color:#E1E4E8">(hangul_ord </span><span style="color:#F97583">+</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'가'</span><span style="color:#E1E4E8">))</span></span></code></pre></figure>
<p>한 가지 주의할 점은, <code>Python</code>은 <code>C</code>와는 다르게 정수 사이의 연산이어도 <code>/</code> 연산자가 몫이 아닌 실제로 나눈 실수 값, <code>float</code>을 반환한다. 따라서 몫을 반환하는 연산자인 <code>//</code>를 써야한다.</p>
<hr>
<p>우리가 의도한 대로 글자를 변형하여 반환하는 함수 <code>encrypt</code>이다. 초성, 중성, 종성 리스트에서 중성을 설정한 값 <code>neus_encrypt</code>로 변환하고 그것에 해당하는 글자를 만들어 <code>Hangul</code> 객체를 반환한다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">def</span><span style="color:#B392F0"> encrypt</span><span style="color:#E1E4E8">(self):</span></span>
<span data-line=""><span style="color:#E1E4E8">    neus_encrypt </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [ </span><span style="color:#9ECBFF">"ㅑ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅒ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅒ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅖ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅕ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅖ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅖ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅒ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅛ"</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#9ECBFF">             "ㅙ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅞ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅞ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅛ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅠ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅞ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅝ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅟ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅠ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅢ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅢ"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"ㅣ"</span><span style="color:#E1E4E8"> ]</span></span>
<span data-line=""><span style="color:#E1E4E8">    ret </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span></span>
<span data-line=""><span style="color:#E1E4E8">    ret.element[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> neus_encrypt[</span><span style="color:#79B8FF">self</span><span style="color:#E1E4E8">.element_query[</span><span style="color:#9ECBFF">'neu'</span><span style="color:#E1E4E8">].index(</span><span style="color:#79B8FF">self</span><span style="color:#E1E4E8">.element[</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">])]</span></span>
<span data-line=""><span style="color:#E1E4E8">    ret.letter </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> self</span><span style="color:#E1E4E8">.combine(ret.element)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    return</span><span style="color:#E1E4E8"> ret</span></span></code></pre></figure>
<p>작성한 <code>encrypt</code> 함수가 잘 작동하는지 테스트해보자.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">for</span><span style="color:#E1E4E8"> letter </span><span style="color:#F97583">in</span><span style="color:#9ECBFF"> '세종대왕'</span><span style="color:#E1E4E8">:</span></span>
<span data-line=""><span style="color:#79B8FF">    print</span><span style="color:#E1E4E8">(Hangul(letter).encrypt(), </span><span style="color:#FFAB70">end</span><span style="color:#F97583"> =</span><span style="color:#9ECBFF"> ""</span><span style="color:#E1E4E8">)</span></span></code></pre></figure>
<pre><code>셰죵댸왱
</code></pre>
<p>잘 작동한다. 어찌된게 조금 약올리는(?) 느낌이 들지만 넘어가자.</p>
<hr>
<p>이제 글자 하나를 변형하는 방법을 완성했으니, 글자 여러 개로 이루어진 텍스트를 변형할 차례이다. 이를 위해 새로운 함수 <code>encrypt_text</code>를 선언하였다. <code>encrypt_text</code> 함수는 문자열을 받아 변형된 문자열을 반환한다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">def</span><span style="color:#B392F0"> encrypt_text</span><span style="color:#E1E4E8">(text):</span></span>
<span data-line=""><span style="color:#E1E4E8">    encrypted </span><span style="color:#F97583">=</span><span style="color:#9ECBFF"> ""</span></span>
<span data-line=""><span style="color:#F97583">    for</span><span style="color:#E1E4E8"> letter </span><span style="color:#F97583">in</span><span style="color:#E1E4E8"> text:</span></span>
<span data-line=""><span style="color:#F97583">        if</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'가'</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">&#x3C;=</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(letter) </span><span style="color:#F97583">&#x3C;=</span><span style="color:#79B8FF"> ord</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">'힣'</span><span style="color:#E1E4E8">):</span></span>
<span data-line=""><span style="color:#E1E4E8">            encrypted </span><span style="color:#F97583">+=</span><span style="color:#E1E4E8"> Hangul(letter).encrypt().letter</span></span>
<span data-line=""><span style="color:#F97583">        else</span><span style="color:#E1E4E8">:</span></span>
<span data-line=""><span style="color:#E1E4E8">            encrypted </span><span style="color:#F97583">+=</span><span style="color:#E1E4E8"> letter</span></span>
<span data-line=""><span style="color:#F97583">    return</span><span style="color:#E1E4E8"> encrypted</span></span></code></pre></figure>
<p><code>Hangul</code> 객체는 한글 글자 <code>가</code><del><code>힣</code>만을 받는 것을 전제로 하고 있으므로 알파벳 같은 다른 문자가 들어가면 에러를 발생시킨다. 그래서 함수 내에 문자가 <code>가</code></del><code>힣</code>에 있을 때만 <code>encrypt</code>하고, 나머지 문자는 그대로 나오도록 하였다.</p>
<p><code>encrypt_text</code>를 테스트해보자.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#E1E4E8">text </span><span style="color:#F97583">=</span><span style="color:#9ECBFF"> "동해물과 백두산이 마르고 닳도록"</span></span>
<span data-line=""><span style="color:#79B8FF">print</span><span style="color:#E1E4E8">(encrypt_text(text))</span></span></code></pre></figure>
<pre><code>둉햬뮬괘 뱩듀샨이 먀릐교 댫됴룍
</code></pre>
<p>잘 작동한다.</p>
<p>이 글의 목적이 호텔 리뷰 작성이었으므로 호텔 리뷰도 변형해본다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#E1E4E8">review </span><span style="color:#F97583">=</span><span style="color:#9ECBFF"> "이 호텔 시설이 너무 별로였어요. 서비스도 좋지 않았습니다."</span></span>
<span data-line=""><span style="color:#79B8FF">print</span><span style="color:#E1E4E8">(encrypt_text(review))</span></span></code></pre></figure>
<pre><code>이 효톌 시셜이 녀뮤 볠료옜여요. 셔비싀됴 죻지 얂얐싑니댜.
</code></pre>
<figure class="rehype-figure"><img src="https://user-images.githubusercontent.com/39009836/43682257-59b41208-98aa-11e8-9f00-cead9549c105.png" alt="image"><figcaption>image</figcaption></figure>
<p>의도와 일치하는 결과를 보여주었다. 구글 번역기도 안 통하는, 한국인만 알아볼 수 있는 리뷰 작성 프로그램을 완성했다!</p>
<p>...그런데 아무리 봐도 약오르는 느낌을 지울 수가 없어서 아예 약올리는 용도로 사용해보았다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="python" data-theme="github-dark"><code data-language="python" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#E1E4E8">text </span><span style="color:#F97583">=</span><span style="color:#9ECBFF"> "야~ 따라하지 말라고~."</span></span>
<span data-line=""><span style="color:#79B8FF">print</span><span style="color:#E1E4E8">(encrypt_text(text))</span></span></code></pre></figure>
<pre><code>얘~ 땨랴햐지 먈랴교~.
</code></pre>
<figure class="rehype-figure"><img src="https://user-images.githubusercontent.com/39009836/43682282-383bd16e-98ab-11e8-92ba-4c52ba12049e.png" alt="얘~ 땨랴햐지 먈랴교~."><figcaption>얘~ 땨랴햐지 먈랴교~.</figcaption></figure>
<h2>출처</h2>
<p>[1] <a href="http://dream.ahboom.net/entry/%ED%95%9C%EA%B8%80-%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EC%9E%90%EC%86%8C-%EB%B6%84%EB%A6%AC-%EB%B0%A9%EB%B2%95">http://dream.ahboom.net/entry/한글-유니코드-자소-분리-방법</a></p>
<p>[2] <a href="https://docs.python.org/ko/3/library/functions.html#chr">https://docs.python.org/ko/3/library/functions.html#chr</a></p>
<p>[3] <a href="https://www.unicode.org/charts/PDF/UAC00.pdf">https://www.unicode.org/charts/PDF/UAC00.pdf</a></p>5:["$","article",null,{"className":"prose dark:prose-invert mx-auto py-8","children":[["$","h1",null,{"className":"text-4xl font-bold","children":"한국인만 알아볼 수 있는 리뷰 만들기"}],["$","div",null,{"className":"flex items-center gap-4 mt-2 mb-2","children":[["$","p",null,{"className":"text-gray-500 !my-0","children":"2018년 8월 5일"}],["$","$L2",null,{"href":"/categories/dev","children":["$","span",null,{"className":"bg-gray-200 text-gray-800 text-sm font-medium px-3 py-1 rounded-full !my-0 hover:bg-gray-300","children":"dev"}]}]]}],["$","hr",null,{"className":"!my-4"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
11:I[622,[],"IconMark"]
9:{"metadata":[["$","title","0",{"children":"한국인만 알아볼 수 있는 리뷰 만들기 | My Velite Blog"}],["$","meta","1",{"name":"description","content":"Python을 이용한 한글 유니코드 분리"}],["$","meta","2",{"property":"og:title","content":"한국인만 알아볼 수 있는 리뷰 만들기"}],["$","meta","3",{"property":"og:description","content":"Python을 이용한 한글 유니코드 분리"}],["$","meta","4",{"property":"og:type","content":"article"}],["$","meta","5",{"property":"article:published_time","content":"2018-08-05T00:00:00.000Z"}],["$","meta","6",{"name":"twitter:card","content":"summary"}],["$","meta","7",{"name":"twitter:title","content":"한국인만 알아볼 수 있는 리뷰 만들기"}],["$","meta","8",{"name":"twitter:description","content":"Python을 이용한 한글 유니코드 분리"}],["$","link","9",{"rel":"icon","href":"/new_blog_velite/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L11","10",{}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
