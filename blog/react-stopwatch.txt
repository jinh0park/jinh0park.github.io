1:"$Sreact.fragment"
2:I[2619,["619","static/chunks/619-ba102abea3e3d0e4.js","953","static/chunks/app/blog/%5Bslug%5D/page-7cf65f3911bce8b7.js"],""]
3:I[9766,[],""]
4:I[8924,[],""]
6:I[4431,[],"OutletBoundary"]
8:I[5278,[],"AsyncMetadataOutlet"]
a:I[4431,[],"ViewportBoundary"]
c:I[4431,[],"MetadataBoundary"]
d:"$Sreact.suspense"
f:I[7150,[],""]
:HL["/_next/static/media/4cf2300e9c8272f7-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/css/8cd908196c5f99fa.css","style"]
0:{"P":null,"b":"zp11YICo0no68g9G9pVjw","p":"","c":["","blog","react-stopwatch"],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","react-stopwatch","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8cd908196c5f99fa.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ko","children":["$","body",null,{"className":"__variable_188709 __variable_9a8899 antialiased","children":["$","div",null,{"className":"flex flex-col min-h-screen","children":[["$","header",null,{"className":"bg-gray-100 dark:bg-gray-900 border-b","children":["$","div",null,{"className":"container mx-auto px-4 py-4 flex justify-between items-center","children":[["$","$L2",null,{"href":"/","className":"text-xl font-bold hover:text-blue-600","children":"jinh0park = jin + h0 + park"}],["$","nav",null,{"children":["$","a",null,{"href":"https://github.com/jinh0park","target":"_blank","rel":"noopener noreferrer","className":"text-gray-600 dark:text-gray-300 hover:text-black dark:hover:text-white","children":"GitHub"}]}]]}]}],["$","main",null,{"className":"flex-grow container mx-auto px-4 py-8","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"border-t mt-12 py-6","children":["$","div",null,{"className":"container mx-auto px-4 text-center text-gray-500","children":["$","p",null,{"children":["© ",2025," jinh0park. All Rights Reserved."]}]}]}]]}]}]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","react-stopwatch","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L5",null,["$","$L6",null,{"children":["$L7",["$","$L8",null,{"promise":"$@9"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$La",null,{"children":"$Lb"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Lc",null,{"children":["$","div",null,{"hidden":true,"children":["$","$d",null,{"fallback":null,"children":"$Le"}]}]}]]}],false]],"m":"$undefined","G":["$f",[]],"s":false,"S":true}
10:T4e1f,<p>답안지 작성 사이트를 만들던 중 스톱워치 기능이 필요하여 검색해보았다.</p>
<p>구글에 "react stopwatch"를 치면 블로그 글이 여러개 나오는데, 그대로 따라해 작동 시켜보니 치명적인 문제점이 있었다. 바로 실제 시간과 일치하지 않는다는 것!!</p>
<p>웹 상의 많은 코드들이 setInterval을 이용해 1초마다 시간 값을 +1 해주는 방식으로 스톱워치를 구동하고 있었는데, setInterval의 interval을 1초(1000밀리초)로 설정해도 항상 1000밀리초마다 루프가 돌아간다는 보장이 없기 때문에 해당 문제가 발생한다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="javascript" data-theme="github-dark"><code data-language="javascript" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">const</span><span style="color:#B392F0"> func</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#E1E4E8">    localStorage.</span><span style="color:#B392F0">setItem</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"1"</span><span style="color:#E1E4E8">, </span><span style="color:#9ECBFF">"1"</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#E1E4E8">};</span></span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#79B8FF"> time</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Date</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">getTime</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#F97583">const</span><span style="color:#79B8FF"> interval</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> setInterval</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#B392F0">    func</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#E1E4E8">    console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> Date</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">getTime</span><span style="color:#E1E4E8">() </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> time);</span></span>
<span data-line=""><span style="color:#E1E4E8">}, </span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">);</span></span></code></pre></figure>
<p>가령 위 코드를 크롬 콘솔창에 넣고 실행해보면, 1초(1000밀리초)마다 "현재 시각 - 처음 시각"이 밀리초 단위로 출력되어야 할 것이다. 만약 setInterval이 정확히 1000밀리초 단위로 반복된다면, 콘솔창에는 1000, 2000, 3000, ... 등 1000의 배수가 찍힐 것이다.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#24292e;color:#e1e4e8" tabindex="0" data-language="javascript" data-theme="github-dark"><code data-language="javascript" data-theme="github-dark" style="display: grid;"><span data-line=""><span style="color:#F97583">import</span><span style="color:#E1E4E8"> React, { useState, useEffect, useRef } </span><span style="color:#F97583">from</span><span style="color:#9ECBFF"> "react"</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">function</span><span style="color:#B392F0"> Stopwatch</span><span style="color:#E1E4E8">() {</span></span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">initialTime</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setInitialTime</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#B392F0"> useState</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">currentTime</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setCurrentTime</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#B392F0"> useState</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">savedTime</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setSavedTime</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#B392F0"> useState</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">isRunning</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">setIsRunning</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#B392F0"> useState</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">false</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#79B8FF"> interval</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> useRef</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#B392F0"> formatTimeDelta</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">timedelta</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#6A737D">        //eslint-disable-next-line</span></span>
<span data-line=""><span style="color:#F97583">        const</span><span style="color:#E1E4E8"> [</span><span style="color:#79B8FF">ms</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">ss</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">mm</span><span style="color:#E1E4E8">, </span><span style="color:#79B8FF">hh</span><span style="color:#E1E4E8">] </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> [</span></span>
<span data-line=""><span style="color:#B392F0">            parseInt</span><span style="color:#E1E4E8">(timedelta) </span><span style="color:#F97583">%</span><span style="color:#79B8FF"> 100</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#B392F0">            parseInt</span><span style="color:#E1E4E8">(timedelta </span><span style="color:#F97583">/</span><span style="color:#79B8FF"> 1000</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">%</span><span style="color:#79B8FF"> 60</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#B392F0">            parseInt</span><span style="color:#E1E4E8">(timedelta </span><span style="color:#F97583">/</span><span style="color:#E1E4E8"> (</span><span style="color:#79B8FF">60</span><span style="color:#F97583"> *</span><span style="color:#79B8FF"> 1000</span><span style="color:#E1E4E8">)) </span><span style="color:#F97583">%</span><span style="color:#79B8FF"> 60</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#B392F0">            parseInt</span><span style="color:#E1E4E8">(timedelta </span><span style="color:#F97583">/</span><span style="color:#E1E4E8"> (</span><span style="color:#79B8FF">60</span><span style="color:#F97583"> *</span><span style="color:#79B8FF"> 60</span><span style="color:#F97583"> *</span><span style="color:#79B8FF"> 1000</span><span style="color:#E1E4E8">)),</span></span>
<span data-line=""><span style="color:#E1E4E8">        ].</span><span style="color:#B392F0">map</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">x</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span></span>
<span data-line=""><span style="color:#E1E4E8">            x.</span><span style="color:#B392F0">toLocaleString</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">"en-US"</span><span style="color:#E1E4E8">, {</span></span>
<span data-line=""><span style="color:#E1E4E8">                minimumIntegerDigits: </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#E1E4E8">                useGrouping: </span><span style="color:#79B8FF">false</span><span style="color:#E1E4E8">,</span></span>
<span data-line=""><span style="color:#E1E4E8">            })</span></span>
<span data-line=""><span style="color:#E1E4E8">        );</span></span>
<span data-line=""><span style="color:#F97583">        return</span><span style="color:#9ECBFF"> `${</span><span style="color:#E1E4E8">hh</span><span style="color:#9ECBFF">}:${</span><span style="color:#E1E4E8">mm</span><span style="color:#9ECBFF">}:${</span><span style="color:#E1E4E8">ss</span><span style="color:#9ECBFF">}:${</span><span style="color:#E1E4E8">ms</span><span style="color:#9ECBFF">}`</span><span style="color:#E1E4E8">;</span></span>
<span data-line=""><span style="color:#E1E4E8">    };</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">    useEffect</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">        const</span><span style="color:#79B8FF"> time</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Date</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">getTime</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#B392F0">        setCurrentTime</span><span style="color:#E1E4E8">(time);</span></span>
<span data-line=""><span style="color:#B392F0">        setInitialTime</span><span style="color:#E1E4E8">(time);</span></span>
<span data-line=""><span style="color:#E1E4E8">    }, []);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#B392F0">    useEffect</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">        if</span><span style="color:#E1E4E8"> (isRunning) {</span></span>
<span data-line=""><span style="color:#F97583">            const</span><span style="color:#79B8FF"> time</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Date</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">getTime</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#B392F0">            setInitialTime</span><span style="color:#E1E4E8">(time);</span></span>
<span data-line=""><span style="color:#B392F0">            setCurrentTime</span><span style="color:#E1E4E8">(time);</span></span>
<span data-line=""><span style="color:#E1E4E8">            interval.current </span><span style="color:#F97583">=</span><span style="color:#B392F0"> setInterval</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#B392F0">                setCurrentTime</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> Date</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">getTime</span><span style="color:#E1E4E8">());</span></span>
<span data-line=""><span style="color:#E1E4E8">            }, </span><span style="color:#79B8FF">10</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#E1E4E8">        } </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#B392F0">            clearInterval</span><span style="color:#E1E4E8">(interval.current);</span></span>
<span data-line=""><span style="color:#B392F0">            setSavedTime</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">t</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> t </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> currentTime </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> initialTime);</span></span>
<span data-line=""><span style="color:#F97583">            const</span><span style="color:#79B8FF"> time</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Date</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">getTime</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#B392F0">            setCurrentTime</span><span style="color:#E1E4E8">(time);</span></span>
<span data-line=""><span style="color:#B392F0">            setInitialTime</span><span style="color:#E1E4E8">(time);</span></span>
<span data-line=""><span style="color:#E1E4E8">        }</span></span>
<span data-line=""><span style="color:#6A737D">        // currentTime, initialTime은 !isRunning일 때 렌더링 되지 않으므로, deps에 넣기 불필요</span></span>
<span data-line=""><span style="color:#6A737D">        // eslint-disable-next-line</span></span>
<span data-line=""><span style="color:#E1E4E8">    }, [isRunning]);</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#B392F0"> onRun</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#B392F0">        setIsRunning</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">state</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#F97583"> !</span><span style="color:#E1E4E8">state);</span></span>
<span data-line=""><span style="color:#E1E4E8">    };</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    const</span><span style="color:#B392F0"> onStop</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>
<span data-line=""><span style="color:#F97583">        const</span><span style="color:#79B8FF"> time</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Date</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">getTime</span><span style="color:#E1E4E8">();</span></span>
<span data-line=""><span style="color:#B392F0">        setIsRunning</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">false</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#B392F0">        setCurrentTime</span><span style="color:#E1E4E8">(time);</span></span>
<span data-line=""><span style="color:#B392F0">        setInitialTime</span><span style="color:#E1E4E8">(time);</span></span>
<span data-line=""><span style="color:#B392F0">        setSavedTime</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0</span><span style="color:#E1E4E8">);</span></span>
<span data-line=""><span style="color:#E1E4E8">    };</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">    return</span><span style="color:#E1E4E8"> (</span></span>
<span data-line=""><span style="color:#E1E4E8">        &#x3C;</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>
<span data-line=""><span style="color:#E1E4E8">            &#x3C;</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">>{</span><span style="color:#B392F0">formatTimeDelta</span><span style="color:#E1E4E8">(currentTime </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> initialTime </span><span style="color:#F97583">+</span><span style="color:#E1E4E8"> savedTime)}&#x3C;/</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">></span></span>
<span data-line=""><span style="color:#E1E4E8">            &#x3C;</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">></span></span>
<span data-line=""><span style="color:#E1E4E8">                &#x3C;</span><span style="color:#85E89D">button</span><span style="color:#B392F0"> onClick</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{onRun}>{isRunning </span><span style="color:#F97583">?</span><span style="color:#9ECBFF"> "PAUSE"</span><span style="color:#F97583"> :</span><span style="color:#9ECBFF"> "PLAY"</span><span style="color:#E1E4E8">}&#x3C;/</span><span style="color:#85E89D">button</span><span style="color:#E1E4E8">></span></span>
<span data-line=""><span style="color:#E1E4E8">                &#x3C;</span><span style="color:#85E89D">button</span><span style="color:#B392F0"> onClick</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{onStop}>STOP&#x3C;/</span><span style="color:#85E89D">button</span><span style="color:#E1E4E8">></span></span>
<span data-line=""><span style="color:#E1E4E8">            &#x3C;/</span><span style="color:#85E89D">p</span><span style="color:#E1E4E8">></span></span>
<span data-line=""><span style="color:#E1E4E8">        &#x3C;/</span><span style="color:#85E89D">div</span><span style="color:#E1E4E8">></span></span>
<span data-line=""><span style="color:#E1E4E8">    );</span></span>
<span data-line=""><span style="color:#E1E4E8">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F97583">export</span><span style="color:#F97583"> default</span><span style="color:#E1E4E8"> Stopwatch;</span></span></code></pre></figure>
<p>대부분은 직관적으로 이해하기 어렵지 않은 코드이다. 다만 currentTime, initialTime 외 savedTime을 도입했는데, 이는 Pause 기능을 구현하기 위함이다.</p>
<p>currentTime과 initialTime만 state로 관리를 하고 그 차이를 렌더링하면, 스톱워치를 Pause하고 있는 동안에도 내부적으로 계속 시간이 카운트된다. 따라서, Pause하는 순간 savedTime에 시간을 누적하고, 다시 Play를 누르면 currentTime, initialTime을 초기화하면 문제 없이 일시정지(Pause)를 구현할 수 있다.</p>
<p>한 가지 주의할 것은, 만약 스톱워치를 밀리초 단위까지 보여줄 경우 밀리초 부분은 너무 빨리 바뀌어서 텍스트가 덜덜 떨리는 것 처럼 보인다.</p>
<p>이는 밀리초 부분을 과감히 포기하거나, 모노스페이스 폰트를 활용하여 해결할 수 있을 것이다. 아니면 시/분/초/밀리초 별로 고정된 크기의 <code>&#x3C;span></code> 에 분리하는 방법도 있을 듯?</p>
<hr>
<p>완성된 코드와 실제 데모는 아래 Codepen 링크에서 확인할 수 있다.</p>
<p><a href="https://codepen.io/jinh0park/pen/eYXwzBr">React Stopwatch</a></p>5:["$","article",null,{"className":"prose dark:prose-invert mx-auto py-8","children":[["$","h1",null,{"className":"text-4xl font-bold","children":"React로 정확한 스톱워치 만들기"}],["$","div",null,{"className":"flex items-center gap-4 mt-2 mb-2","children":[["$","p",null,{"className":"text-gray-500 !my-0","children":"2024년 2월 23일"}],["$","$L2",null,{"href":"/categories/dev","children":["$","span",null,{"className":"bg-gray-200 text-gray-800 text-sm font-medium px-3 py-1 rounded-full !my-0 hover:bg-gray-300","children":"dev"}]}]]}],["$","hr",null,{"className":"!my-4"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
b:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
7:null
11:I[622,[],"IconMark"]
9:{"metadata":[["$","title","0",{"children":"React로 정확한 스톱워치 만들기 | My Velite Blog"}],["$","meta","1",{"name":"description","content":"오차 누적 없는 정확한 시간 계산 방법"}],["$","meta","2",{"property":"og:title","content":"React로 정확한 스톱워치 만들기"}],["$","meta","3",{"property":"og:description","content":"오차 누적 없는 정확한 시간 계산 방법"}],["$","meta","4",{"property":"og:type","content":"article"}],["$","meta","5",{"property":"article:published_time","content":"2024-02-23T00:00:00.000Z"}],["$","meta","6",{"name":"twitter:card","content":"summary"}],["$","meta","7",{"name":"twitter:title","content":"React로 정확한 스톱워치 만들기"}],["$","meta","8",{"name":"twitter:description","content":"오차 누적 없는 정확한 시간 계산 방법"}],["$","link","9",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","$L11","10",{}]],"error":null,"digest":"$undefined"}
e:"$9:metadata"
